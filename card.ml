open Deck

(* The following 4 lists are actually string representations of cards
   in the different suits. They are used for printing purposes and appear
   like this in order to meet the 80 character limit restriction. *)
(*BISECT-IGNORE-BEGIN*)
let diamonds = [
  "┌─────────┐";"┌─────────┐";"┌─────────┐";"┌─────────┐";"┌─────────┐";
  "┌─────────┐";"┌─────────┐";"┌─────────┐";"┌─────────┐";"┌─────────┐";
  "┌─────────┐";"┌─────────┐";"┌─────────┐";
  "│2        │";"│3        │";"│4        │";"│5        │";"│6        │";
  "│7        │";"│8        │";"│9        │";"│10       │";"│J        │";
  "│Q        │";"│K        │";"│A        │";
  "│         │";"│         │";"│         │";"│         │";"│         │";
  "│         │";"│         │";"│         │";"│         │";"│         │";
  "│         │";"│         │";"│         │";
  "│         │";"│         │";"│         │";"│         │";"│         │";
  "│         │";"│         │";"│         │";"│         │";"│         │";
  "│         │";"│         │";"│         │";
  "│    ♦    │";"│    ♦    │";"│    ♦    │";"│    ♦    │";"│    ♦    │";
  "│    ♦    │";"│    ♦    │";"│    ♦    │";"│    ♦    │";"│    ♦    │";
  "│    ♦    │";"│    ♦    │";"│    ♦    │";
  "│         │";"│         │";"│         │";"│         │";"│         │";
  "│         │";"│         │";"│         │";"│         │";"│         │";
  "│         │";"│         │";"│         │";
  "│         │";"│         │";"│         │";"│         │";"│         │";
  "│         │";"│         │";"│         │";"│         │";"│         │";
  "│         │";"│         │";"│         │";
  "│        2│";"│        3│";"│        4│";"│        5│";"│        6│";
  "│        7│";"│        8│";"│        9│";"│       10│";"│        J│";
  "│        Q│";"│        K│";"│        A│";
  "└─────────┘";"└─────────┘";"└─────────┘";"└─────────┘";"└─────────┘";
  "└─────────┘";"└─────────┘";"└─────────┘";"└─────────┘";"└─────────┘";
  "└─────────┘";"└─────────┘";"└─────────┘";
]
let clubs = [
  "┌─────────┐";"┌─────────┐";"┌─────────┐";"┌─────────┐";"┌─────────┐";
  "┌─────────┐";"┌─────────┐";"┌─────────┐";"┌─────────┐";"┌─────────┐";
  "┌─────────┐";"┌─────────┐";"┌─────────┐";
  "│2        │";"│3        │";"│4        │";"│5        │";"│6        │";
  "│7        │";"│8        │";"│9        │";"│10       │";"│J        │";
  "│Q        │";"│K        │";"│A        │";
  "│         │";"│         │";"│         │";"│         │";"│         │";
  "│         │";"│         │";"│         │";"│         │";"│         │";
  "│         │";"│         │";"│         │";
  "│         │";"│         │";"│         │";"│         │";"│         │";
  "│         │";"│         │";"│         │";"│         │";"│         │";
  "│         │";"│         │";"│         │";
  "│    ♣    │";"│    ♣    │";"│    ♣    │";"│    ♣    │";"│    ♣    │";
  "│    ♣    │";"│    ♣    │";"│    ♣    │";"│    ♣    │";"│    ♣    │";
  "│    ♣    │";"│    ♣    │";"│    ♣    │";
  "│         │";"│         │";"│         │";"│         │";"│         │";
  "│         │";"│         │";"│         │";"│         │";"│         │";
  "│         │";"│         │";"│         │";
  "│         │";"│         │";"│         │";"│         │";"│         │";
  "│         │";"│         │";"│         │";"│         │";"│         │";
  "│         │";"│         │";"│         │";
  "│        2│";"│        3│";"│        4│";"│        5│";"│        6│";
  "│        7│";"│        8│";"│        9│";"│       10│";"│        J│";
  "│        Q│";"│        K│";"│        A│";
  "└─────────┘";"└─────────┘";"└─────────┘";"└─────────┘";"└─────────┘";
  "└─────────┘";"└─────────┘";"└─────────┘";"└─────────┘";"└─────────┘";
  "└─────────┘";"└─────────┘";"└─────────┘";
]
let spades = [
  "┌─────────┐";"┌─────────┐";"┌─────────┐";"┌─────────┐";"┌─────────┐";
  "┌─────────┐";"┌─────────┐";"┌─────────┐";"┌─────────┐";"┌─────────┐";
  "┌─────────┐";"┌─────────┐";"┌─────────┐";
  "│2        │";"│3        │";"│4        │";"│5        │";"│6        │";
  "│7        │";"│8        │";"│9        │";"│10       │";"│J        │";
  "│Q        │";"│K        │";"│A        │";
  "│         │";"│         │";"│         │";"│         │";"│         │";
  "│         │";"│         │";"│         │";"│         │";"│         │";
  "│         │";"│         │";"│         │";
  "│         │";"│         │";"│         │";"│         │";"│         │";
  "│         │";"│         │";"│         │";"│         │";"│         │";
  "│         │";"│         │";"│         │";
  "│    ♠    │";"│    ♠    │";"│    ♠    │";"│    ♠    │";"│    ♠    │";
  "│    ♠    │";"|    ♠    │";"│    ♠    │";"│    ♠    │";"│    ♠    │";
  "|    ♠    │";"│    ♠    │";"│    ♠    │";
  "│         │";"│         │";"│         │";"│         │";"│         │";
  "│         │";"│         │";"│         │";"│         │";"│         │";
  "│         │";"│         │";"│         │";
  "│         │";"│         │";"│         │";"│         │";"│         │";
  "│         │";"│         │";"│         │";"│         │";"│         │";
  "│         │";"│         │";"│         │";
  "│        2│";"│        3│";"│        4│";"│        5│";"│        6│";
  "│        7│";"│        8│";"│        9│";"│       10│";"│        J│";
  "│        Q│";"│        K│";"│        A│";
  "└─────────┘";"└─────────┘";"└─────────┘";"└─────────┘";"└─────────┘";
  "└─────────┘";"└─────────┘";"└─────────┘";"└─────────┘";"└─────────┘";
  "└─────────┘";"└─────────┘";"└─────────┘";
]
let hearts = [
  "┌─────────┐";"┌─────────┐";"┌─────────┐";"┌─────────┐";"┌─────────┐";
  "┌─────────┐";"┌─────────┐";"┌─────────┐";"┌─────────┐";"┌─────────┐";
  "┌─────────┐";"┌─────────┐";"┌─────────┐";
  "│2        │";"│3        │";"│4        │";"│5        │";"│6        │";
  "│7        │";"│8        │";"│9        │";"│10       │";"│J        │";
  "│Q        │";"│K        │";"│A        │";
  "│         │";"│         │";"│         │";"│         │";"│         │";
  "│         │";"│         │";"│         │";"│         │";"│         │";
  "│         │";"│         │";"│         │";
  "│         │";"│         │";"│         │";"│         │";"│         │";
  "│         │";"│         │";"│         │";"│         │";"│         │";
  "│         │";"│         │";"│         │";
  "│    ♥    │";"│    ♥    │";"│    ♥    │";"│    ♥    │";"│    ♥    │";
  "│    ♥    │";"│    ♥    │";"│    ♥    │";"│    ♥    │";"│    ♥    │";
  "│    ♥    │";"│    ♥    │";"│    ♥    │";
  "│         │";"│         │";"│         │";"│         │";"│         │";
  "│         │";"│         │";"│         │";"│         │";"│         │";
  "│         │";"│         │";"│         │";
  "│         │";"│         │";"│         │";"│         │";"│         │";
  "│         │";"│         │";"│         │";"│         │";"│         │";
  "│         │";"│         │";"│         │";
  "│        2│";"│        3│";"│        4│";"│        5│";"│        6│";
  "│        7│";"│        8│";"│        9│";"│       10│";"│        J│";
  "│        Q│";"│        K│";"│        A│";
  "└─────────┘";"└─────────┘";"└─────────┘";"└─────────┘";"└─────────┘";
  "└─────────┘";"└─────────┘";"└─────────┘";"└─────────┘";"└─────────┘";
  "└─────────┘";"└─────────┘";"└─────────┘";
]
(*BISECT-IGNORE-END*)

(** [color] is the color of a card. *)
type color = Red | Black

let card_printer cardlist =
  let rec card_builder count start_index target_list outlist =
    if count = 9 then List.rev outlist
    else let element = List.nth target_list start_index in
      card_builder (count + 1) (start_index + 13) (target_list)
        (element :: outlist) in

  let rank_to_int = function
    | Two -> 0
    | Three -> 1
    | Four -> 2
    | Five -> 3
    | Six -> 4
    | Seven -> 5
    | Eight -> 6
    | Nine -> 7
    | Ten -> 8
    | Jack -> 9
    | Queen -> 10
    | King -> 11
    | Ace -> 12 in

  let suit_ascii = function
    | Diamonds -> diamonds
    | Hearts -> hearts
    | Spades -> spades
    | Clubs -> clubs in

  let suit_color = function
    | Diamonds
    | Hearts -> Red
    | Spades
    | Clubs -> Black in

  let element (suit, rank) =
    let func suit rank lst =
      (card_builder 0 (rank_to_int rank) (lst) [], suit) in
    func suit rank (suit_ascii suit) in
  let card_ascii = List.map element cardlist in

  let card_printer_impl col line =
    ANSITerminal.(print_string [col; Background White]) line in
  let red_printer = card_printer_impl ANSITerminal.red in
  let black_printer = card_printer_impl ANSITerminal.black in
  let card_printer = function
    | Red -> red_printer
    | Black -> black_printer in

  let rec print_all_lines count original_list = function
    | [] when count = 8 -> ()
    | [] -> print_newline (); ANSITerminal.set_cursor 10 (-1);
      print_all_lines (count + 1) original_list original_list
    | (h, suit) :: t -> (suit_color suit |> card_printer) (List.nth h count);
      print_string "    ";
      print_all_lines count original_list t in
  ANSITerminal.set_cursor 10 (-1);
  print_all_lines 0 card_ascii card_ascii;
  ANSITerminal.move_bol ()
